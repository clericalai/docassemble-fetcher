metadata:
  title: Fetcher
  exit link: leave
---
modules:
  - docassemble.base.util
  - .fetch
---
imports:
  - time
---
objects:
  - input_address: Address.using(city="Philadelphia", state="PA")
---
question: |
  The Fetcher
subquestion: |
  This service is provided by [Philadelphia Legal Assistance] to housing 
  counselors and homeowner advocates in Philadelphia.
  
  Please enter the secret password.
  
  [Philadelphia Legal Assistance]: https://philalegal.org
fields:
  - Password: password
    datatype: password
---
code: |
  if 'manual_password' in url_args:
    password = url_args['manual_password']
---
question: |
  What property would you like to look up?
fields:
  - Look up using: input_type
    datatype: radio
    default: address
    choices:
      - Address: address
      - Docket number: docket
  - Docket number: docketnum
    hint: |
      e.g., 171102263
    show if:
      variable: input_type
      is: docket
  - Address: input_address.address
    hint: |
      e.g., 718 Arch St
    show if:
      variable: input_type
      is: address
  - Your e-mail: email_address
    required: False
  - note: |
      If you provide your e-mail address, the documents will be e-mailed to you.
---
mandatory: True
code: |
  if password != get_config('fetcher password'):
    you_are_not_authorized
---
scan for variables: False
mandatory: True
code: |
  if input_type == 'docket':
    docket = Docket(docketnum)
    try:
      addr = Property(docket.get_address())
    except:
      unable_to_get_address_of_docket
  else:
    try:
      addr = Property(input_address)
    except:
      unable_to_normalize_address
  task_list = []
  opa_task = background_action('opa_generate', None, address=addr)
  task_list.append(opa_task)
  revenue_task = background_action('revenue_generate', None, address=addr)
  task_list.append(revenue_task)
  if input_type == 'docket':
    pleadings_task = background_action('pleadings_generate', None, docket=docket)
    task_list.append(pleadings_task)
  philadox_task = background_action('philadox_generate', None, address=addr)
  task_list.append(philadox_task)
  street_view_task = background_action('street_view_generate', None, address=addr)
  task_list.append(street_view_task)
---
mandatory: True
code: |
  if not all_finished(task_list):
    waiting_screen
  else:
    final_screen
---
event: unable_to_normalize_address
question: |
  Unable to process address
subquestion: |
  We were unable to process the address you provided.

  Please try again, and try specifying the address with as much
  precision as you can, so that the system recognizes it as
  an address in Philadelphia.
---
event: unable_to_get_address_of_docket
question: |
  Unable to get documents
subquestion: |
  We were unable to find an address for docket
  number ${ docketnum }.

  Please make sure you have typed the docket number
  correctly.  Or, try looking up the property
  by address.
---
event: you_are_not_authorized
question: |
  The password you entered is incorrect.
subquestion: |
  Sorry, that password was not correct.  You are not
  allowed to access this system.
---
template: results
content: |
  ### Property assessment

  % if opa_task.ready():
    % if not hasattr(addr, 'opa_page'):
  Unable to obtain OPA information.
    % else:
  ${ addr.opa_page.show('100px', wait=False) }
  ${ addr.avi_page.show('100px', wait=False) }

      % if addr.has_homestead:
  Homestead exemption: **obtained**.
      % else:
  Homestead exemption: **not obtained**.
      % endif
    % endif
  % else:
  Please wait.
  % endif
  
  ### Real estate taxes

  % if revenue_task.ready():
    % if not hasattr(addr, 'revenue_page'):
  Unable to obtain Department of Revenue information.
    % else:
  ${ addr.revenue_page.show('100px', wait=False) }
    % endif
  % else:
  Please wait.
  % endif
  
  ### Department of Records documents

  % if philadox_task.ready():
    % if not hasattr(addr, 'philadox_files'):
  Unable to obtain Department of Records information.
    % else:
      % for doc in [y for y in addr.philadox_files if y.filename == 'Philadox-listing.pdf']:
  ${ doc.show('100px', wait=False) }
      % endfor
      % for doc in [y for y in addr.philadox_files if y.filename != 'Philadox-listing.pdf']:
  ${ doc.show('100px', wait=False) }
      % endfor
    % endif
  % else:
  Please wait.
  % endif

  % if input_type == 'docket':
  ### Complaint

  % if pleadings_task.ready():
    % if not hasattr(docket, 'pleadings_list'):
  Unable to obtain complaint.
    % else:
      % for pleading in docket.pleadings_list:
  ${ pleading.show('100px', wait=False) }
  
      % endfor
    % endif
  % else:
  Please wait.
  % endif
  % endif

  ### Google Street View

  % if street_view_task.ready():
    % if not hasattr(addr, 'google_street_view_image'):
  Unable to obtain Google Street View image.
    % else:
  [${ addr.google_street_view_image.show(width='100%') }](${ addr.google_street_view_pdf.url_for() })
    % endif
  % else:
  Please wait.
  % endif
---
prevent_going_back: True
event: final_screen
question: |
  Information about ${ addr.one_line() }.
subquestion: |
  ${ results }
  
  <a class="btn btn-primary" href="${ get_config('exitpage', '/?reset=1') + '&manual_password=' + password }">Look up another</a>
---
event: waiting_screen
reload: 10
question: |
  Information about ${ addr.one_line() }.
subquestion: |
  % if email_address != '':
  Your documents are being fetched and will be e-mailed to you when
  the fetching is completed in a few minutes.  You can close this window
  or [fetch another address](${ get_config('exitpage', '/?reset=1') + '&manual_password=' + password }).
  
  % endif
  ${ results }
---
event: opa_generate
code: |
  background_response_action('opa_save', opa_page=action_argument('address').get_opa_page(), avi_page=action_argument('address').get_avi_page(), has_homestead=action_argument('address').get_homestead())
---
scan for variables: False
event: opa_save
code: |
  addr.opa_page = action_argument('opa_page')
  addr.avi_page = action_argument('avi_page')
  addr.has_homestead = action_argument('homestead')
  if all_finished(task_list):
    email_handled
  background_response()
---
event: revenue_generate
code: |
  background_response_action('revenue_save', revenue_page=action_argument('address').get_revenue_page())
---
scan for variables: False
event: revenue_save
code: |
  addr.revenue_page = action_argument('revenue_page')
  if all_finished(task_list):
    email_handled
  background_response()
---
event: pleadings_generate
code: |
  background_response_action('pleadings_save', pleadings_list=action_argument('docket').get_pleadings_list())
---  
scan for variables: False
event: pleadings_save
code: |
  docket.pleadings_list = action_argument('pleadings_list')
  if all_finished(task_list):
    email_handled
  background_response()
---
event: philadox_generate
code: |
  background_response_action('philadox_save', philadox_files=action_argument('address').get_philadox_files())
---
scan for variables: False
event: philadox_save
code: |
  addr.philadox_files = action_argument('philadox_files')
  if all_finished(task_list):
    email_handled
  background_response()
---
event: street_view_generate
code: |
  background_response_action('street_view_save', street_view_image=action_argument('address').get_google_street_view_image(), street_view_pdf=action_argument('address').get_google_street_view_pdf())
---
scan for variables: False
event: street_view_save
code: |
  addr.google_street_view_image = action_argument('street_view_image')
  addr.google_street_view_pdf = action_argument('street_view_pdf')
  if all_finished(task_list):
    email_handled
  background_response()
---
code: |
  if email_address != '' and not task_performed('email_sent'):
    need(email_template)
    attachment_list = list()
    if hasattr(addr, 'opa_page'):
      attachment_list.append(addr.opa_page)
    if hasattr(addr, 'avi_page'):
      attachment_list.append(addr.avi_page)
    if hasattr(addr, 'revenue_page'):
      attachment_list.append(addr.revenue_page)
    if hasattr(addr, 'philadox_files'):
      for doc in addr.philadox_files:
        attachment_list.append(doc)
    if input_type == 'docket':
      if hasattr(docket, 'pleadings_list'):
        for pleading in docket.pleadings_list:
          attachment_list.append(pleading)
    if hasattr(addr, 'google_street_view_pdf'):
      attachment_list.append(addr.google_street_view_pdf)
    send_email(to=email_address, template=email_template, attachments=attachment_list, task='email_sent')
    del attachment_list
  email_handled = True
---
template: email_template
subject: |
  Property info for ${ addr.one_line() }
  % if input_type == 'docket':
  (${ docketnum })
  % endif
content: |
  Attached are documents relating to the property at ${ addr.one_line() }.

  % if hasattr(addr, 'opa_page'):
  * Office of Property Assessment (OPA) report
  % endif
  % if hasattr(addr, 'avi_page'):
  * Actual Value Initiative (AVI) report
  % endif
  % if hasattr(addr, 'revenue_page'):
  * Real estate tax balances
  % endif
  % if hasattr(addr, 'philadox_files'):
  * Deed/mortgage documents from the Department of Records, by year
  % endif
  % if input_type == 'docket' and hasattr(docket, 'pleadings_list'):
  * Complaint
  % endif
  % if hasattr(addr, 'google_street_view_pdf'):
  * Google Street View image
  % endif
